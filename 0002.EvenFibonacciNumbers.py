#!/usr/bin/env python3

# https://projecteuler.net/problem=2
# Even Fibonacci Numbers
# Problem 2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import time

fibMax = 4000000

# Method 1
start_time = time.time()
sumFibEven = 0
n=1

def fib(n):
  if n<=0:
    return 0
  elif n==1:
    return 1
  elif n==2:
    return 2
  else:
    return (fib(n-1)+fib(n-2))


fibN=fib(n)
while fibN < fibMax:
  if fibN % 2 ==0:
    sumFibEven += fibN
  n+=1
  fibN=fib(n)
#  print(n, fibN, sumFibEven)

end_time = time.time()
execution_time = end_time - start_time
print(f"Method 1. The sum of the even-valued Fibonacci terms : {sumFibEven}, Execution time: {execution_time:.6f} seconds")


# Method 2
start_time = time.time()
sumFibEven = 0

n=2
a=1
b=1
c=a+b

while c < fibMax:
  if c % 2 ==0:
    sumFibEven += c
  n+=1
  a=b
  b=c
  c=a+b
#  print(n, c, sumFibEven)


end_time = time.time()
execution_time = end_time - start_time
print(f"Method 2. The sum of the even-valued Fibonacci terms : {sumFibEven}, Execution time: {execution_time:.6f} seconds")